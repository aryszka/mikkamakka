(def s {
	a 1
	b 2
	c 3})
(def s (struct
	a 1
	b 2
	c 3
))
(s 'a)

(def v [1 2 3])
(def v (vector 1 2 3))
(v 1)

; how to return multiple values
; how to return monads and values

(def f (fopen "/some/file"))
(def f (read f 512))
(def s (last-read f))
(def f (write f s))

(def l (fn () 42))

(struct 'a 1 'b 2)
(struct: a 1 b 2)
{a 1 b 2}
??? quoting ???

(vector 1 2)
(vector: 1 2)
[1 2]
??? quoting ???

#lit

The below code implements the traditional map:

(code

	(def (map f l)
	  (if (nil? l)
	    '()
		(cons (f (car l)) (map (cdr l)))))
	
	; how to make this support subtests? one symbol one test?
	(test
		(test "nil" (= (map (+ 1) '()) '()))
		(test "some other test" (=== (map (+ 1) '(1 2 3)) '(2 3 4)))

'end-code)

The above code is the map, tested.

Values with dimension?

#lit

(map (+ 1) '(1 2 3))

#ini

[a.b]
c.d = 1

#ini#lit
#lit

(((a 'b) 'c) 'd)
